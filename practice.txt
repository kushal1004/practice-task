<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Responsive Todo App â€” LocalStorage</title>

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">

    <style>
      :root{
        --bg: linear-gradient(135deg,#0f172a 0%, #0b75d4 100%);
        --card: rgba(255,255,255,0.06);
        --accent: #ffd166;
      }
      body{
        background: var(--bg);
        color:#fff;
        font-family: Inter, sans-serif;
        margin:0;
        padding:0;
        min-height:100vh;
        display:flex;
        justify-content:center;
        align-items:flex-start;
      }

      .todo-container{
        width:100%;
        max-width:600px;
        margin:1rem;
        background:rgba(255,255,255,0.05);
        border-radius:12px;
        padding:1rem;
        box-shadow:0 4px 20px rgba(0,0,0,0.3);
      }

      .task-input{
        flex:1;
        border:none;
        background:transparent;
        color:#fff;
        outline:none;
      }
      .task-input::placeholder{color:#bbb}

      .task-item{
        display:flex;
        align-items:center;
        justify-content:space-between;
        background:rgba(255,255,255,0.08);
        border-radius:8px;
        padding:.5rem .75rem;
        margin-bottom:.5rem;
      }
      .task-item.completed .task-text{
        text-decoration:line-through;
        color:#aaa;
      }
      .task-text{
        flex:1;
        margin-left:.5rem;
        word-break:break-word;
      }

      .controls{
        display:flex;
        flex-wrap:wrap;
        gap:.5rem;
        justify-content:space-between;
        margin:.5rem 0 1rem;
      }

      .tasks-list{
        max-height:60vh;
        overflow-y:auto;
      }
      .tasks-list::-webkit-scrollbar{width:6px}
      .tasks-list::-webkit-scrollbar-thumb{background:#444;border-radius:3px}

      @media(max-width:576px){
        .todo-container{margin:.5rem;padding:.75rem}
        .controls{flex-direction:column;align-items:stretch}
      }
    </style>
  </head>
  <body>
    <div class="todo-container">
      <h4 class="mb-3 text-center">My Tasks</h4>
      <div class="d-flex mb-3">
        <input id="taskInput" class="task-input" placeholder="Add a new task">
        <button id="addBtn" class="btn btn-primary ms-2"><i class="bi bi-plus"></i></button>
      </div>

      <div class="controls">
        <div class="btn-group" id="filters">
          <button class="btn btn-sm btn-outline-light active" data-filter="all">All</button>
          <button class="btn btn-sm btn-outline-light" data-filter="active">Active</button>
          <button class="btn btn-sm btn-outline-light" data-filter="completed">Completed</button>
        </div>
        <input id="searchInput" class="form-control form-control-sm" placeholder="Search tasks">
      </div>

      <div class="tasks-list" id="tasksList"></div>

      <div class="d-flex justify-content-between mt-3">
        <small id="remainingCount">0 remaining</small>
        <div>
          <button id="clearCompleted" class="btn btn-sm btn-outline-light">Clear Completed</button>
          <button id="clearAll" class="btn btn-sm btn-outline-danger">Clear All</button>
        </div>
      </div>
    </div>

    <script>
      const storageKey = 'todo_tasks_v2';
      let tasks = [];
      let currentFilter = 'all';

      const taskInput=document.getElementById('taskInput');
      const addBtn=document.getElementById('addBtn');
      const tasksList=document.getElementById('tasksList');
      const filters=document.getElementById('filters');
      const remainingCount=document.getElementById('remainingCount');
      const searchInput=document.getElementById('searchInput');
      const clearCompleted=document.getElementById('clearCompleted');
      const clearAll=document.getElementById('clearAll');

      function loadTasks(){
        tasks=JSON.parse(localStorage.getItem(storageKey))||[];
      }
      function saveTasks(){
        localStorage.setItem(storageKey,JSON.stringify(tasks));
      }

      function uid(){return Date.now().toString(36)+Math.random().toString(36).slice(2,7)}

      function addTask(text){
        if(!text.trim())return;
        tasks.unshift({id:uid(),text:text.trim(),done:false});
        saveTasks();renderTasks();
      }

      function toggleDone(id){
        const t=tasks.find(x=>x.id===id);
        if(t){t.done=!t.done;saveTasks();renderTasks();}
      }

      function deleteTask(id){
        tasks=tasks.filter(t=>t.id!==id);
        saveTasks();renderTasks();
      }

      function editTask(id){
        const newText=prompt("Edit task:",tasks.find(t=>t.id===id).text);
        if(newText){
          tasks.find(t=>t.id===id).text=newText.trim();
          saveTasks();renderTasks();
        }
      }

      function clearCompletedTasks(){
        tasks=tasks.filter(t=>!t.done);
        saveTasks();renderTasks();
      }

      function clearAllTasks(){
        if(confirm("Delete all tasks?")){
          tasks=[];saveTasks();renderTasks();
        }
      }

      function applyFilter(f){
        currentFilter=f;
        Array.from(filters.querySelectorAll('button')).forEach(b=>b.classList.toggle('active',b.dataset.filter===f));
        renderTasks();
      }

      function renderTasks(){
        const q=searchInput.value.toLowerCase();
        let visible=tasks.filter(t=>{
          if(currentFilter==='active'&&t.done)return false;
          if(currentFilter==='completed'&&!t.done)return false;
          if(q&&!t.text.toLowerCase().includes(q))return false;
          return true;
        });
        tasksList.innerHTML='';
        if(visible.length===0){
          tasksList.innerHTML='<div class="text-center text-muted py-3">No tasks found</div>';
        }else{
          visible.forEach(t=>{
            const el=document.createElement('div');
            el.className='task-item'+(t.done?' completed':'');
            el.innerHTML=`
              <div class="form-check">
                <input type="checkbox" class="form-check-input" ${t.done?'checked':''}>
              </div>
              <div class="task-text">${t.text}</div>
              <div class="btn-group btn-group-sm">
                <button class="btn btn-outline-light"><i class="bi bi-pencil"></i></button>
                <button class="btn btn-outline-danger"><i class="bi bi-trash"></i></button>
              </div>`;
            el.querySelector('input').addEventListener('change',()=>toggleDone(t.id));
            el.querySelector('.bi-pencil').parentElement.addEventListener('click',()=>editTask(t.id));
            el.querySelector('.bi-trash').parentElement.addEventListener('click',()=>deleteTask(t.id));
            tasksList.appendChild(el);
          });
        }
        const remaining=tasks.filter(t=>!t.done).length;
        remainingCount.innerText=remaining+" remaining";
      }

      addBtn.addEventListener('click',()=>{addTask(taskInput.value);taskInput.value='';});
      taskInput.addEventListener('keydown',e=>{if(e.key==='Enter'){addTask(taskInput.value);taskInput.value='';}});
      filters.addEventListener('click',e=>{if(e.target.closest('button'))applyFilter(e.target.closest('button').dataset.filter)});
      searchInput.addEventListener('input',renderTasks);
      clearCompleted.addEventListener('click',clearCompletedTasks);
      clearAll.addEventListener('click',clearAllTasks);

      loadTasks();renderTasks();
    </script>
  </body>
</html>
